#!/usr/bin/env perl6

use v6;

my $lib;

BEGIN {
  use Test;
  $lib=q{/Users/imel/gitdev/donalgrant/equations/lib};
#  use lib $lib;
#  use-ok 'Cube', "Make sure we can import the Cube.pm6 module";
}

use Test;
use lib $lib;
use Cube;

#sub same_content($$$) {
#  my $ha=shift;
#  my $hb=shift;
#  my $msg=shift;
#  is_deeply( [sort { $a cmp $b } @$ha], [sort { $a cmp $b } @$hb], $msg );
#}

my ($c, $r, $b, $g, $k)=Cube.new('a'.list), Red_Cube.new(), Blue_Cube.new(), Green_Cube.new(), Black_Cube.new();
my $cb=Cube_Bag.new([$c,$r,$b,$g,$k]);

my $cube_methods=qw<new roll showing>;

#can-ok( $_, $cube_methods.list ) for ($c,$r,$b,$g,$k);
#can-ok( $cb, qw<new roll showing unique> );

my $f=qw<1 2 3 4 5 6>;
$c=Cube.new($f);
isa-ok $c, 'Cube',                           "made a cube";
is-deeply $c.faces.list.sort, $f.list.sort,  "Faces on cube match";
like $f, /{ $c.showing }/,                   "showing matches one of the original faces";
isa-ok $c.roll, 'Cube',                      "roll returns the object";

my %h;
for (1..10000) { %h{$c.roll.showing}=1 }   # 10,000 rolls should be enough to get at least one of each face
is-deeply $c.faces.list.sort, %h.keys.sort,  "All faces rolled after 10,000 tries";

# just do one color for now

$f=qw<0 1 2 3 * />;
$c=Blue_Cube.new;
isa-ok $c, 'Blue_Cube',                      "made a cube";
is-deeply $c.faces.list.sort, $f.list.sort,  "Faces on cube match";
like $f, /{ $c.showing }/,                   "showing matches one of the original faces";
isa-ok $c.roll, 'Blue_Cube',                 "roll returns the object";

%h=();
for (1..10000) { %h{$c.roll.showing}=1 }   # 10,000 rolls should be enough to get at least one of each face
is-deeply $c.faces.list.sort, %h.keys.sort,  "All faces rolled after 10,000 tries";

$cb=Cube_Bag.new([ Red_Cube.new(), Blue_Cube.new(), Green_Cube.new(), Black_Cube.new() ]);
isa-ok( $cb, 'Cube_Bag' );

done-testing;
=finish

$regex='['.join('',sort {$a cmp $b} $red->showing(),$blue->showing(),$green->showing(),$black->showing()).']';
my @cbf=$cb->showing();
is( scalar(@cbf), 4, "four cubes in Cube_Bag" );
for (@cbf) { like( $_, qr{$regex}, "$_ is one of the faces" ) }
isa-ok( $cb->roll(), 'Cube_Bag' );
%h=();
for (1..10000) { $h{$_}=1 for ($cb->roll()->showing()) }   # 10,000 rolls of four cubes in Cube_Bag
same_content [keys %h], [::unique $red->faces(),$blue->faces(),$green->faces(),$black->faces()], 
  "All faces in Cube_Bag rolled after 10,000 tries";

done_testing;
