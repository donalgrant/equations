#!/usr/bin/env perl6

use v6;

my $lib;

BEGIN { $lib=q{/Users/imel/gitdev/donalgrant/equations/lib} }

use Test;
use lib $lib;
use-ok 'Globals', "Make sure we can import the Globals.pm6 module";
use Globals;

lives-ok { say caller.list.join('') }, "caller";

lives-ok { msg("test message") }, "test message";
lives-ok { msg("test", "src")  }, "test message with source";
lives-ok { msg("test", :trace) }, "test message with trace";
lives-ok { msg("test", "src", :trace) }, "test message with source and trace";

dies-ok  { quit("quit test")   }, "quit test";
dies-ok  { quit("quit", "src") }, "quit test with source";

lives-ok { assert( { 1 }, "pass test") }, "assert with pass";
dies-ok  { assert( { 0 }, "fail test") }, "assert with fail";

ok( unique(qw<a b b b c c >) == [ qw<a b c> ], "unique" );  # built in to Perl 6

my @list=qw{ a b c d e 1 2 3 4 5 };
my @original_list=@list;
my @shuffled=shuffle(@list);  # make a copy

ok(  @list.elems    ==  @shuffled.elems, "shuffle preserves array length" );
ok(  @shuffled      ==  @list,           "shuffle retains all elements" );
nok( @list          eqv @shuffled,       "shuffle altered the order of the list.  (fail should be rare.)" );
ok(  @original_list eqv @list,           "shuffle didn't alter the order of original list." );


is( min(5,9,3,234,-2,0,3), -2,   "min on array" );
is( max(5,9,3,234,-2,0,3), 234,  "max on array" );


done-testing;
